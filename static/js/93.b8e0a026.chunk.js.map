{"version":3,"file":"static/js/93.b8e0a026.chunk.js","mappings":"mSAEaA,EAAiBC,EAAAA,EAAAA,GAAH,2RAadC,EAAiBD,EAAAA,EAAAA,GAAH,uMAOdE,EAAgBF,EAAAA,EAAAA,IAAH,gKAQbG,EAAkBH,EAAAA,EAAAA,GAAH,gDAIfI,EAASJ,EAAAA,EAAAA,EAAH,6C,6BC8BnB,EAlDa,WACX,OAAwBK,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAfAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,oGAEdJ,GAAa,GAFC,UAGKK,EAAAA,EAAAA,IAAYJ,GAHjB,OAGRK,EAHQ,OAIdV,EAAQU,EAAKX,MAJC,iDAMdY,EAAAA,EAAAA,GAAYT,GANE,yBAQdE,GAAa,GARC,4EAAH,qDAWfI,GACD,GAAE,CAACH,KAGF,gCACGF,IAAa,SAACS,EAAA,EAAD,IACbX,IAAS,uBAAIA,IACbF,EAAKc,OAAS,GACb,SAACrB,EAAD,UACGO,EAAKe,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,UAA3B,OACR,UAACxB,EAAD,YACE,SAACC,EAAD,CACEwB,IACEF,EAAY,8CAC+BA,EAD/B,KAERG,EAENC,IAAKtB,EAAKiB,QAEZ,SAACpB,EAAD,UAAkBoB,KAClB,4BAAM,cAAYE,IAAwB,0BAAM,WAV7BH,EADb,OAgBZ,SAAClB,EAAD,UAAQ,oDAIf,C,gFC5DYyB,E,QAAe7B,EAAAA,IAAH,0O,SCkBzB,EAjBe,WACb,OACE,SAAC6B,EAAD,WACE,SAAC,KAAD,CACEC,OAAO,MACPC,MAAM,MACNC,OAAO,IACPC,MAAM,UACNC,UAAU,qBACVC,aAAc,CAAC,EACfC,iBAAiB,GACjBC,SAAS,KAIhB,C,qBCdD,IAJoB,SAAA5B,GAClBA,EAAS,sDACV,C,mMCAK6B,EAAW,+BACXC,EAAU,mCAEHC,EAAgB,mCAAG,WAAMC,GAAN,uFACPC,EAAAA,EAAAA,IAAA,UAClBJ,EADkB,qCACmBC,EADnB,iBACmCE,EADnC,oBADO,cACxBE,EADwB,yBAIvBA,EAAS1B,MAJc,2CAAH,sDAOhB2B,EAAW,mCAAG,WAAMhC,GAAN,uFACF8B,EAAAA,EAAAA,IAAA,UAClBJ,EADkB,kBACA1B,EADA,oBACmB2B,EADnB,oBADE,cACnBI,EADmB,yBAIlBA,EAAS1B,MAJS,2CAAH,sDAOXD,EAAW,mCAAG,WAAMJ,GAAN,uFACF8B,EAAAA,EAAAA,IAAA,UAClBJ,EADkB,kBACA1B,EADA,4BAC2B2B,EAD3B,oBADE,cACnBI,EADmB,yBAIlBA,EAAS1B,MAJS,2CAAH,sDAOX4B,EAAU,mCAAG,WAAMjC,GAAN,uFACD8B,EAAAA,EAAAA,IAAA,UAClBJ,EADkB,kBACA1B,EADA,4BAC2B2B,EAD3B,2BADC,cAClBI,EADkB,yBAIjBA,EAAS1B,MAJQ,2CAAH,sDAOV6B,EAAc,mCAAG,WAAMC,GAAN,uFACLL,EAAAA,EAAAA,IAAA,UAClBJ,EADkB,+BACaS,EADb,wCACsDR,EADtD,2BADK,cACtBI,EADsB,yBAIrBA,EAAS1B,MAJY,2CAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","helpers/index.js","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const StyledCastList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  grid-gap: 20px;\n  margin-top: 40px;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const StyledCastItem = styled.li`\n  border-radius: 2px;\n  overflow: hidden;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const StyledCastImg = styled.img`\n  display: block;\n  width: 100%;\n  height: 320px;\n  object-fit: cover;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nexport const StyledNameActor = styled.h3`\n  margin-bottom: 10px;\n`;\n\nexport const NoCast = styled.p`\n  margin-top: 40px;\n`;\n","import Loader from 'components/Loader/Loader';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCastFilm } from 'services/api';\nimport {\n  NoCast,\n  StyledCastImg,\n  StyledCastItem,\n  StyledCastList,\n  StyledNameActor,\n} from './Cast.styled';\nimport noImage from '../../images/no-image.jpg';\nimport handleError from 'helpers';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setIsLoading(true);\n        const data = await getCastFilm(movieId);\n        setCast(data.cast);\n      } catch (error) {\n        handleError(setError);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <p>{error}</p>}\n      {cast.length > 0 ? (\n        <StyledCastList>\n          {cast.map(({ id, name, profile_path, character }) => (\n            <StyledCastItem key={id}>\n              <StyledCastImg\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/original/${profile_path} `\n                    : noImage\n                }\n                alt={cast.name}\n              />\n              <StyledNameActor>{name}</StyledNameActor>\n              <span>Character: {character ? character : <span>-</span>}</span>\n            </StyledCastItem>\n          ))}\n        </StyledCastList>\n      ) : (\n        <NoCast>We don't have any cast members for this movie</NoCast>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import styled from '@emotion/styled';\n\nexport const StyledLoader = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(46, 47, 66, 0.2);\n  z-index: 1000;\n`;\n","import { ThreeDots } from 'react-loader-spinner';\nimport { StyledLoader } from './Loader.styled';\n\nconst Loader = () => {\n  return (\n    <StyledLoader>\n      <ThreeDots\n        height=\"100\"\n        width=\"100\"\n        radius=\"9\"\n        color=\"#f87719\"\n        ariaLabel=\"three-dots-loading\"\n        wrapperStyle={{}}\n        wrapperClassName=\"\"\n        visible={true}\n      />\n    </StyledLoader>\n  );\n};\n\nexport default Loader;\n","const handleError = setError => {\n  setError('Oops, some error occurred. Please, try again later.');\n};\n\nexport default handleError;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '07c0e032482e785f96b6eca01e8f41dd';\n\nexport const getTrendingFilms = async page => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/all/day?api_key=${API_KEY}&page=${page}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getFilmById = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getCastFilm = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data;\n};\n\nexport const getMovieByName = async movieName => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?query=${movieName}&include_adult=false&api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data;\n};\n"],"names":["StyledCastList","styled","StyledCastItem","StyledCastImg","StyledNameActor","NoCast","useState","cast","setCast","error","setError","isLoading","setIsLoading","movieId","useParams","useEffect","fetchData","getCastFilm","data","handleError","Loader","length","map","id","name","profile_path","character","src","noImage","alt","StyledLoader","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","BASE_URL","API_KEY","getTrendingFilms","page","axios","response","getFilmById","getReviews","getMovieByName","movieName"],"sourceRoot":""}